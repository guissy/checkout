// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.27.3
// source: payment_method.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "";

export interface CurrencyInfo {
  id: number;
  currencyNameEn: string;
  currencyName: string;
  currencyCode: string;
  paymentMethodId: number;
}

export interface PaymentMethod {
  id: number;
  productId: number;
  platformId: number;
  type: string;
  transactionType: string;
  imageLink: string;
  acquiringMode: string;
  processingCurrencies: string;
  productChannelId: string;
  merchantId: string;
  providerId: number;
  platformName: string;
  channelId: number;
  markup: number;
  needField: string;
  regular: string;
  supportedConsumer: string;
  currencyInfo: CurrencyInfo[];
}

export interface PaymentMethodList {
  data: PaymentMethod[];
  code: string;
  msg: string;
  serverTime: string;
  success: boolean;
}

export interface PaymentMethodForm {
  /** 使用 PaymentMethodValue 中定义的值 */
  type: string;
  holderName: string;
  firstName: string;
  lastName: string;
  shopperEmail: string;
}

function createBaseCurrencyInfo(): CurrencyInfo {
  return { id: 0, currencyNameEn: "", currencyName: "", currencyCode: "", paymentMethodId: 0 };
}

export const CurrencyInfo: MessageFns<CurrencyInfo> = {
  encode(message: CurrencyInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.currencyNameEn !== "") {
      writer.uint32(18).string(message.currencyNameEn);
    }
    if (message.currencyName !== "") {
      writer.uint32(26).string(message.currencyName);
    }
    if (message.currencyCode !== "") {
      writer.uint32(34).string(message.currencyCode);
    }
    if (message.paymentMethodId !== 0) {
      writer.uint32(40).uint32(message.paymentMethodId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CurrencyInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCurrencyInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.currencyNameEn = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.currencyName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.currencyCode = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.paymentMethodId = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CurrencyInfo {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      currencyNameEn: isSet(object.currencyNameEn) ? globalThis.String(object.currencyNameEn) : "",
      currencyName: isSet(object.currencyName) ? globalThis.String(object.currencyName) : "",
      currencyCode: isSet(object.currencyCode) ? globalThis.String(object.currencyCode) : "",
      paymentMethodId: isSet(object.paymentMethodId) ? globalThis.Number(object.paymentMethodId) : 0,
    };
  },

  toJSON(message: CurrencyInfo): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.currencyNameEn !== "") {
      obj.currencyNameEn = message.currencyNameEn;
    }
    if (message.currencyName !== "") {
      obj.currencyName = message.currencyName;
    }
    if (message.currencyCode !== "") {
      obj.currencyCode = message.currencyCode;
    }
    if (message.paymentMethodId !== 0) {
      obj.paymentMethodId = Math.round(message.paymentMethodId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CurrencyInfo>, I>>(base?: I): CurrencyInfo {
    return CurrencyInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CurrencyInfo>, I>>(object: I): CurrencyInfo {
    const message = createBaseCurrencyInfo();
    message.id = object.id ?? 0;
    message.currencyNameEn = object.currencyNameEn ?? "";
    message.currencyName = object.currencyName ?? "";
    message.currencyCode = object.currencyCode ?? "";
    message.paymentMethodId = object.paymentMethodId ?? 0;
    return message;
  },
};

function createBasePaymentMethod(): PaymentMethod {
  return {
    id: 0,
    productId: 0,
    platformId: 0,
    type: "",
    transactionType: "",
    imageLink: "",
    acquiringMode: "",
    processingCurrencies: "",
    productChannelId: "0",
    merchantId: "0",
    providerId: 0,
    platformName: "",
    channelId: 0,
    markup: 0,
    needField: "",
    regular: "",
    supportedConsumer: "",
    currencyInfo: [],
  };
}

export const PaymentMethod: MessageFns<PaymentMethod> = {
  encode(message: PaymentMethod, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.productId !== 0) {
      writer.uint32(16).uint32(message.productId);
    }
    if (message.platformId !== 0) {
      writer.uint32(24).uint32(message.platformId);
    }
    if (message.type !== "") {
      writer.uint32(34).string(message.type);
    }
    if (message.transactionType !== "") {
      writer.uint32(42).string(message.transactionType);
    }
    if (message.imageLink !== "") {
      writer.uint32(50).string(message.imageLink);
    }
    if (message.acquiringMode !== "") {
      writer.uint32(58).string(message.acquiringMode);
    }
    if (message.processingCurrencies !== "") {
      writer.uint32(66).string(message.processingCurrencies);
    }
    if (message.productChannelId !== "0") {
      writer.uint32(72).uint64(message.productChannelId);
    }
    if (message.merchantId !== "0") {
      writer.uint32(80).uint64(message.merchantId);
    }
    if (message.providerId !== 0) {
      writer.uint32(88).uint32(message.providerId);
    }
    if (message.platformName !== "") {
      writer.uint32(98).string(message.platformName);
    }
    if (message.channelId !== 0) {
      writer.uint32(104).uint32(message.channelId);
    }
    if (message.markup !== 0) {
      writer.uint32(113).double(message.markup);
    }
    if (message.needField !== "") {
      writer.uint32(122).string(message.needField);
    }
    if (message.regular !== "") {
      writer.uint32(130).string(message.regular);
    }
    if (message.supportedConsumer !== "") {
      writer.uint32(138).string(message.supportedConsumer);
    }
    for (const v of message.currencyInfo) {
      CurrencyInfo.encode(v!, writer.uint32(146).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaymentMethod {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaymentMethod();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.productId = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.platformId = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.transactionType = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.imageLink = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.acquiringMode = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.processingCurrencies = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.productChannelId = reader.uint64().toString();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.merchantId = reader.uint64().toString();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.providerId = reader.uint32();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.platformName = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.channelId = reader.uint32();
          continue;
        }
        case 14: {
          if (tag !== 113) {
            break;
          }

          message.markup = reader.double();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.needField = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.regular = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.supportedConsumer = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.currencyInfo.push(CurrencyInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaymentMethod {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      productId: isSet(object.productId) ? globalThis.Number(object.productId) : 0,
      platformId: isSet(object.platformId) ? globalThis.Number(object.platformId) : 0,
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      transactionType: isSet(object.transactionType) ? globalThis.String(object.transactionType) : "",
      imageLink: isSet(object.imageLink) ? globalThis.String(object.imageLink) : "",
      acquiringMode: isSet(object.acquiringMode) ? globalThis.String(object.acquiringMode) : "",
      processingCurrencies: isSet(object.processingCurrencies) ? globalThis.String(object.processingCurrencies) : "",
      productChannelId: isSet(object.productChannelId) ? globalThis.String(object.productChannelId) : "0",
      merchantId: isSet(object.merchantId) ? globalThis.String(object.merchantId) : "0",
      providerId: isSet(object.providerId) ? globalThis.Number(object.providerId) : 0,
      platformName: isSet(object.platformName) ? globalThis.String(object.platformName) : "",
      channelId: isSet(object.channelId) ? globalThis.Number(object.channelId) : 0,
      markup: isSet(object.markup) ? globalThis.Number(object.markup) : 0,
      needField: isSet(object.needField) ? globalThis.String(object.needField) : "",
      regular: isSet(object.regular) ? globalThis.String(object.regular) : "",
      supportedConsumer: isSet(object.supportedConsumer) ? globalThis.String(object.supportedConsumer) : "",
      currencyInfo: globalThis.Array.isArray(object?.currencyInfo)
        ? object.currencyInfo.map((e: any) => CurrencyInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: PaymentMethod): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.productId !== 0) {
      obj.productId = Math.round(message.productId);
    }
    if (message.platformId !== 0) {
      obj.platformId = Math.round(message.platformId);
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.transactionType !== "") {
      obj.transactionType = message.transactionType;
    }
    if (message.imageLink !== "") {
      obj.imageLink = message.imageLink;
    }
    if (message.acquiringMode !== "") {
      obj.acquiringMode = message.acquiringMode;
    }
    if (message.processingCurrencies !== "") {
      obj.processingCurrencies = message.processingCurrencies;
    }
    if (message.productChannelId !== "0") {
      obj.productChannelId = message.productChannelId;
    }
    if (message.merchantId !== "0") {
      obj.merchantId = message.merchantId;
    }
    if (message.providerId !== 0) {
      obj.providerId = Math.round(message.providerId);
    }
    if (message.platformName !== "") {
      obj.platformName = message.platformName;
    }
    if (message.channelId !== 0) {
      obj.channelId = Math.round(message.channelId);
    }
    if (message.markup !== 0) {
      obj.markup = message.markup;
    }
    if (message.needField !== "") {
      obj.needField = message.needField;
    }
    if (message.regular !== "") {
      obj.regular = message.regular;
    }
    if (message.supportedConsumer !== "") {
      obj.supportedConsumer = message.supportedConsumer;
    }
    if (message.currencyInfo?.length) {
      obj.currencyInfo = message.currencyInfo.map((e) => CurrencyInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PaymentMethod>, I>>(base?: I): PaymentMethod {
    return PaymentMethod.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PaymentMethod>, I>>(object: I): PaymentMethod {
    const message = createBasePaymentMethod();
    message.id = object.id ?? 0;
    message.productId = object.productId ?? 0;
    message.platformId = object.platformId ?? 0;
    message.type = object.type ?? "";
    message.transactionType = object.transactionType ?? "";
    message.imageLink = object.imageLink ?? "";
    message.acquiringMode = object.acquiringMode ?? "";
    message.processingCurrencies = object.processingCurrencies ?? "";
    message.productChannelId = object.productChannelId ?? "0";
    message.merchantId = object.merchantId ?? "0";
    message.providerId = object.providerId ?? 0;
    message.platformName = object.platformName ?? "";
    message.channelId = object.channelId ?? 0;
    message.markup = object.markup ?? 0;
    message.needField = object.needField ?? "";
    message.regular = object.regular ?? "";
    message.supportedConsumer = object.supportedConsumer ?? "";
    message.currencyInfo = object.currencyInfo?.map((e) => CurrencyInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBasePaymentMethodList(): PaymentMethodList {
  return { data: [], code: "", msg: "", serverTime: "0", success: false };
}

export const PaymentMethodList: MessageFns<PaymentMethodList> = {
  encode(message: PaymentMethodList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.data) {
      PaymentMethod.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.code !== "") {
      writer.uint32(18).string(message.code);
    }
    if (message.msg !== "") {
      writer.uint32(26).string(message.msg);
    }
    if (message.serverTime !== "0") {
      writer.uint32(32).uint64(message.serverTime);
    }
    if (message.success !== false) {
      writer.uint32(40).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaymentMethodList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaymentMethodList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data.push(PaymentMethod.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.msg = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.serverTime = reader.uint64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaymentMethodList {
    return {
      data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => PaymentMethod.fromJSON(e)) : [],
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      msg: isSet(object.msg) ? globalThis.String(object.msg) : "",
      serverTime: isSet(object.serverTime) ? globalThis.String(object.serverTime) : "0",
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
    };
  },

  toJSON(message: PaymentMethodList): unknown {
    const obj: any = {};
    if (message.data?.length) {
      obj.data = message.data.map((e) => PaymentMethod.toJSON(e));
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.msg !== "") {
      obj.msg = message.msg;
    }
    if (message.serverTime !== "0") {
      obj.serverTime = message.serverTime;
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PaymentMethodList>, I>>(base?: I): PaymentMethodList {
    return PaymentMethodList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PaymentMethodList>, I>>(object: I): PaymentMethodList {
    const message = createBasePaymentMethodList();
    message.data = object.data?.map((e) => PaymentMethod.fromPartial(e)) || [];
    message.code = object.code ?? "";
    message.msg = object.msg ?? "";
    message.serverTime = object.serverTime ?? "0";
    message.success = object.success ?? false;
    return message;
  },
};

function createBasePaymentMethodForm(): PaymentMethodForm {
  return { type: "", holderName: "", firstName: "", lastName: "", shopperEmail: "" };
}

export const PaymentMethodForm: MessageFns<PaymentMethodForm> = {
  encode(message: PaymentMethodForm, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.holderName !== "") {
      writer.uint32(18).string(message.holderName);
    }
    if (message.firstName !== "") {
      writer.uint32(26).string(message.firstName);
    }
    if (message.lastName !== "") {
      writer.uint32(34).string(message.lastName);
    }
    if (message.shopperEmail !== "") {
      writer.uint32(42).string(message.shopperEmail);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaymentMethodForm {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaymentMethodForm();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.holderName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.firstName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.lastName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.shopperEmail = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaymentMethodForm {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      holderName: isSet(object.holderName) ? globalThis.String(object.holderName) : "",
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
      shopperEmail: isSet(object.shopperEmail) ? globalThis.String(object.shopperEmail) : "",
    };
  },

  toJSON(message: PaymentMethodForm): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.holderName !== "") {
      obj.holderName = message.holderName;
    }
    if (message.firstName !== "") {
      obj.firstName = message.firstName;
    }
    if (message.lastName !== "") {
      obj.lastName = message.lastName;
    }
    if (message.shopperEmail !== "") {
      obj.shopperEmail = message.shopperEmail;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PaymentMethodForm>, I>>(base?: I): PaymentMethodForm {
    return PaymentMethodForm.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PaymentMethodForm>, I>>(object: I): PaymentMethodForm {
    const message = createBasePaymentMethodForm();
    message.type = object.type ?? "";
    message.holderName = object.holderName ?? "";
    message.firstName = object.firstName ?? "";
    message.lastName = object.lastName ?? "";
    message.shopperEmail = object.shopperEmail ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
