// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.27.3
// source: payment_status.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "payment";

export enum OrderStatus {
  ORDER_STATUS_UNSPECIFIED = "ORDER_STATUS_UNSPECIFIED",
  INITIALIZED = "INITIALIZED",
  PENDING = "PENDING",
  SUCCESS = "SUCCESS",
  FAILED = "FAILED",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function orderStatusFromJSON(object: any): OrderStatus {
  switch (object) {
    case 0:
    case "ORDER_STATUS_UNSPECIFIED":
      return OrderStatus.ORDER_STATUS_UNSPECIFIED;
    case 1:
    case "INITIALIZED":
      return OrderStatus.INITIALIZED;
    case 2:
    case "PENDING":
      return OrderStatus.PENDING;
    case 3:
    case "SUCCESS":
      return OrderStatus.SUCCESS;
    case 4:
    case "FAILED":
      return OrderStatus.FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OrderStatus.UNRECOGNIZED;
  }
}

export function orderStatusToJSON(object: OrderStatus): string {
  switch (object) {
    case OrderStatus.ORDER_STATUS_UNSPECIFIED:
      return "ORDER_STATUS_UNSPECIFIED";
    case OrderStatus.INITIALIZED:
      return "INITIALIZED";
    case OrderStatus.PENDING:
      return "PENDING";
    case OrderStatus.SUCCESS:
      return "SUCCESS";
    case OrderStatus.FAILED:
      return "FAILED";
    case OrderStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function orderStatusToNumber(object: OrderStatus): number {
  switch (object) {
    case OrderStatus.ORDER_STATUS_UNSPECIFIED:
      return 0;
    case OrderStatus.INITIALIZED:
      return 1;
    case OrderStatus.PENDING:
      return 2;
    case OrderStatus.SUCCESS:
      return 3;
    case OrderStatus.FAILED:
      return 4;
    case OrderStatus.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface OrderStatusOutput {
  /** 收单模式 */
  acquiringMode: string;
  /** 买家 ID */
  buyerId: string;
  /** 渠道 ID */
  channelId: number;
  /** 渠道费率 ID */
  channelRatesId: number;
  /** 渠道请求时间 (Unix 时间戳) */
  channelRequestTime: number;
  /** 国家代码 (ISO 3166-1 Alpha-2/Alpha-3) */
  country: string;
  /** 货币代码 (ISO 4217) */
  currency: string;
  /** 预估下游金额 */
  downstreamEstimatedAmount: number;
  /** 预估下游费用 */
  downstreamEstimatedFee: number;
  /** 下游费用详情 */
  downstreamFee: string;
  /** 下游费用 C 版本 */
  downstreamFeeC: string;
  /** 下游固定费用 */
  downstreamFixedFee: string;
  /** 下游网关费用 */
  downstreamGatewayFee: string;
  /** 下游订单号 */
  downstreamOrderNo: string;
  /** 原始下游订单号 */
  downstreamOrderNoOrigin: string;
  /** 下游跳转 URL */
  downstreamRedirectUrl: string;
  /** 下游交易汇率 */
  downstreamTxRate: string;
  /** 错误信息 */
  errorMsg: string;
  /** 预估金额 */
  estimatedAmount: number;
  /** 预估汇率 */
  estimatedExchangeRate: string;
  /** 失败原因 */
  failReason: string;
  /** 冻结类型 */
  freezeType: number;
  /** 订单 ID */
  id: number;
  /** 商户货币代码 */
  merchantCurrency: string;
  /** 商户 ID */
  merchantId: number;
  /** 商户名称 */
  merchantName: string;
  /** 商户订单金额 */
  merchantOrderAmount: number;
  /** 商户请求时间 (Unix 时间戳) */
  merchantRequestTime: number;
  /** 订单金额 */
  orderAmount: number;
  /** 订单创建时间 (Unix 时间戳) */
  orderCreateTime: number;
  /** 订单状态枚举 */
  orderStatus: OrderStatus;
  /** 订单类型 */
  orderType: string;
  /** 订单来源 */
  origin: string;
  /** 支付兑换金额 */
  paymentExchange: number;
  /** 支付兑换汇率 */
  paymentExchangeRate: number;
  /** 支付方式 */
  paymentMethod: string;
  /** 支付交易加成 */
  paymentTxMarkup: number;
  /** 美元支付交易加成 */
  paymentTxMarkupUsd: number;
  /** 平台 ID */
  platformId: number;
  /** 平台订单号 */
  platformOrderNo: string;
  /** 产品渠道 ID */
  productChannelId: number;
  /** 产品 ID */
  productId: number;
  /** 利润 */
  profit: number;
  /** 供应商 ID */
  providerId: number;
  /** 请求状态 */
  requestStatus: number;
  /** 审核状态 */
  reviewStatus: string;
  /** 风险类型 */
  riskType: number;
  /** 会话 ID */
  sessionId: string;
  /** 结算货币代码 */
  settlementCurrency: string;
  /** 结算周期 */
  settlementCycle: string;
  /** 交易类型 */
  transactionType: string;
  /** 上游预估金额 */
  upstreamEstimatedAmount: number;
  /** 上游预估费用 */
  upstreamEstimatedFee: number;
  /** 上游费用 */
  upstreamFee: string;
  /** 上游固定费用 */
  upstreamFixedFee: string;
  /** 上游网关费用 */
  upstreamGatewayFee: string;
  /** 上游订单号 */
  upstreamOrderNo: string;
  /** 上游状态 */
  upstreamStatus: string;
  /** 上游交易汇率 */
  upstreamTxRate: string;
}

function createBaseOrderStatusOutput(): OrderStatusOutput {
  return {
    acquiringMode: "",
    buyerId: "",
    channelId: 0,
    channelRatesId: 0,
    channelRequestTime: 0,
    country: "",
    currency: "",
    downstreamEstimatedAmount: 0,
    downstreamEstimatedFee: 0,
    downstreamFee: "",
    downstreamFeeC: "",
    downstreamFixedFee: "",
    downstreamGatewayFee: "",
    downstreamOrderNo: "",
    downstreamOrderNoOrigin: "",
    downstreamRedirectUrl: "",
    downstreamTxRate: "",
    errorMsg: "",
    estimatedAmount: 0,
    estimatedExchangeRate: "",
    failReason: "",
    freezeType: 0,
    id: 0,
    merchantCurrency: "",
    merchantId: 0,
    merchantName: "",
    merchantOrderAmount: 0,
    merchantRequestTime: 0,
    orderAmount: 0,
    orderCreateTime: 0,
    orderStatus: OrderStatus.ORDER_STATUS_UNSPECIFIED,
    orderType: "",
    origin: "",
    paymentExchange: 0,
    paymentExchangeRate: 0,
    paymentMethod: "",
    paymentTxMarkup: 0,
    paymentTxMarkupUsd: 0,
    platformId: 0,
    platformOrderNo: "",
    productChannelId: 0,
    productId: 0,
    profit: 0,
    providerId: 0,
    requestStatus: 0,
    reviewStatus: "",
    riskType: 0,
    sessionId: "",
    settlementCurrency: "",
    settlementCycle: "",
    transactionType: "",
    upstreamEstimatedAmount: 0,
    upstreamEstimatedFee: 0,
    upstreamFee: "",
    upstreamFixedFee: "",
    upstreamGatewayFee: "",
    upstreamOrderNo: "",
    upstreamStatus: "",
    upstreamTxRate: "",
  };
}

export const OrderStatusOutput: MessageFns<OrderStatusOutput> = {
  encode(message: OrderStatusOutput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.acquiringMode !== "") {
      writer.uint32(10).string(message.acquiringMode);
    }
    if (message.buyerId !== "") {
      writer.uint32(18).string(message.buyerId);
    }
    if (message.channelId !== 0) {
      writer.uint32(24).int32(message.channelId);
    }
    if (message.channelRatesId !== 0) {
      writer.uint32(32).int32(message.channelRatesId);
    }
    if (message.channelRequestTime !== 0) {
      writer.uint32(40).int32(message.channelRequestTime);
    }
    if (message.country !== "") {
      writer.uint32(50).string(message.country);
    }
    if (message.currency !== "") {
      writer.uint32(58).string(message.currency);
    }
    if (message.downstreamEstimatedAmount !== 0) {
      writer.uint32(64).int32(message.downstreamEstimatedAmount);
    }
    if (message.downstreamEstimatedFee !== 0) {
      writer.uint32(72).int32(message.downstreamEstimatedFee);
    }
    if (message.downstreamFee !== "") {
      writer.uint32(82).string(message.downstreamFee);
    }
    if (message.downstreamFeeC !== "") {
      writer.uint32(90).string(message.downstreamFeeC);
    }
    if (message.downstreamFixedFee !== "") {
      writer.uint32(98).string(message.downstreamFixedFee);
    }
    if (message.downstreamGatewayFee !== "") {
      writer.uint32(106).string(message.downstreamGatewayFee);
    }
    if (message.downstreamOrderNo !== "") {
      writer.uint32(114).string(message.downstreamOrderNo);
    }
    if (message.downstreamOrderNoOrigin !== "") {
      writer.uint32(122).string(message.downstreamOrderNoOrigin);
    }
    if (message.downstreamRedirectUrl !== "") {
      writer.uint32(130).string(message.downstreamRedirectUrl);
    }
    if (message.downstreamTxRate !== "") {
      writer.uint32(138).string(message.downstreamTxRate);
    }
    if (message.errorMsg !== "") {
      writer.uint32(146).string(message.errorMsg);
    }
    if (message.estimatedAmount !== 0) {
      writer.uint32(152).int32(message.estimatedAmount);
    }
    if (message.estimatedExchangeRate !== "") {
      writer.uint32(162).string(message.estimatedExchangeRate);
    }
    if (message.failReason !== "") {
      writer.uint32(170).string(message.failReason);
    }
    if (message.freezeType !== 0) {
      writer.uint32(176).int32(message.freezeType);
    }
    if (message.id !== 0) {
      writer.uint32(184).int32(message.id);
    }
    if (message.merchantCurrency !== "") {
      writer.uint32(194).string(message.merchantCurrency);
    }
    if (message.merchantId !== 0) {
      writer.uint32(200).int32(message.merchantId);
    }
    if (message.merchantName !== "") {
      writer.uint32(210).string(message.merchantName);
    }
    if (message.merchantOrderAmount !== 0) {
      writer.uint32(216).int32(message.merchantOrderAmount);
    }
    if (message.merchantRequestTime !== 0) {
      writer.uint32(224).int32(message.merchantRequestTime);
    }
    if (message.orderAmount !== 0) {
      writer.uint32(232).int32(message.orderAmount);
    }
    if (message.orderCreateTime !== 0) {
      writer.uint32(240).int32(message.orderCreateTime);
    }
    if (message.orderStatus !== OrderStatus.ORDER_STATUS_UNSPECIFIED) {
      writer.uint32(248).int32(orderStatusToNumber(message.orderStatus));
    }
    if (message.orderType !== "") {
      writer.uint32(258).string(message.orderType);
    }
    if (message.origin !== "") {
      writer.uint32(266).string(message.origin);
    }
    if (message.paymentExchange !== 0) {
      writer.uint32(272).int32(message.paymentExchange);
    }
    if (message.paymentExchangeRate !== 0) {
      writer.uint32(280).int32(message.paymentExchangeRate);
    }
    if (message.paymentMethod !== "") {
      writer.uint32(290).string(message.paymentMethod);
    }
    if (message.paymentTxMarkup !== 0) {
      writer.uint32(296).int32(message.paymentTxMarkup);
    }
    if (message.paymentTxMarkupUsd !== 0) {
      writer.uint32(304).int32(message.paymentTxMarkupUsd);
    }
    if (message.platformId !== 0) {
      writer.uint32(312).int32(message.platformId);
    }
    if (message.platformOrderNo !== "") {
      writer.uint32(322).string(message.platformOrderNo);
    }
    if (message.productChannelId !== 0) {
      writer.uint32(328).int32(message.productChannelId);
    }
    if (message.productId !== 0) {
      writer.uint32(336).int32(message.productId);
    }
    if (message.profit !== 0) {
      writer.uint32(344).int32(message.profit);
    }
    if (message.providerId !== 0) {
      writer.uint32(352).int32(message.providerId);
    }
    if (message.requestStatus !== 0) {
      writer.uint32(360).int32(message.requestStatus);
    }
    if (message.reviewStatus !== "") {
      writer.uint32(370).string(message.reviewStatus);
    }
    if (message.riskType !== 0) {
      writer.uint32(376).int32(message.riskType);
    }
    if (message.sessionId !== "") {
      writer.uint32(386).string(message.sessionId);
    }
    if (message.settlementCurrency !== "") {
      writer.uint32(394).string(message.settlementCurrency);
    }
    if (message.settlementCycle !== "") {
      writer.uint32(402).string(message.settlementCycle);
    }
    if (message.transactionType !== "") {
      writer.uint32(410).string(message.transactionType);
    }
    if (message.upstreamEstimatedAmount !== 0) {
      writer.uint32(416).int32(message.upstreamEstimatedAmount);
    }
    if (message.upstreamEstimatedFee !== 0) {
      writer.uint32(424).int32(message.upstreamEstimatedFee);
    }
    if (message.upstreamFee !== "") {
      writer.uint32(434).string(message.upstreamFee);
    }
    if (message.upstreamFixedFee !== "") {
      writer.uint32(442).string(message.upstreamFixedFee);
    }
    if (message.upstreamGatewayFee !== "") {
      writer.uint32(450).string(message.upstreamGatewayFee);
    }
    if (message.upstreamOrderNo !== "") {
      writer.uint32(458).string(message.upstreamOrderNo);
    }
    if (message.upstreamStatus !== "") {
      writer.uint32(466).string(message.upstreamStatus);
    }
    if (message.upstreamTxRate !== "") {
      writer.uint32(474).string(message.upstreamTxRate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderStatusOutput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderStatusOutput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.acquiringMode = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.buyerId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.channelId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.channelRatesId = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.channelRequestTime = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.country = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.downstreamEstimatedAmount = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.downstreamEstimatedFee = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.downstreamFee = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.downstreamFeeC = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.downstreamFixedFee = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.downstreamGatewayFee = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.downstreamOrderNo = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.downstreamOrderNoOrigin = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.downstreamRedirectUrl = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.downstreamTxRate = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.errorMsg = reader.string();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.estimatedAmount = reader.int32();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.estimatedExchangeRate = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.failReason = reader.string();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.freezeType = reader.int32();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.merchantCurrency = reader.string();
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.merchantId = reader.int32();
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.merchantName = reader.string();
          continue;
        }
        case 27: {
          if (tag !== 216) {
            break;
          }

          message.merchantOrderAmount = reader.int32();
          continue;
        }
        case 28: {
          if (tag !== 224) {
            break;
          }

          message.merchantRequestTime = reader.int32();
          continue;
        }
        case 29: {
          if (tag !== 232) {
            break;
          }

          message.orderAmount = reader.int32();
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.orderCreateTime = reader.int32();
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.orderStatus = orderStatusFromJSON(reader.int32());
          continue;
        }
        case 32: {
          if (tag !== 258) {
            break;
          }

          message.orderType = reader.string();
          continue;
        }
        case 33: {
          if (tag !== 266) {
            break;
          }

          message.origin = reader.string();
          continue;
        }
        case 34: {
          if (tag !== 272) {
            break;
          }

          message.paymentExchange = reader.int32();
          continue;
        }
        case 35: {
          if (tag !== 280) {
            break;
          }

          message.paymentExchangeRate = reader.int32();
          continue;
        }
        case 36: {
          if (tag !== 290) {
            break;
          }

          message.paymentMethod = reader.string();
          continue;
        }
        case 37: {
          if (tag !== 296) {
            break;
          }

          message.paymentTxMarkup = reader.int32();
          continue;
        }
        case 38: {
          if (tag !== 304) {
            break;
          }

          message.paymentTxMarkupUsd = reader.int32();
          continue;
        }
        case 39: {
          if (tag !== 312) {
            break;
          }

          message.platformId = reader.int32();
          continue;
        }
        case 40: {
          if (tag !== 322) {
            break;
          }

          message.platformOrderNo = reader.string();
          continue;
        }
        case 41: {
          if (tag !== 328) {
            break;
          }

          message.productChannelId = reader.int32();
          continue;
        }
        case 42: {
          if (tag !== 336) {
            break;
          }

          message.productId = reader.int32();
          continue;
        }
        case 43: {
          if (tag !== 344) {
            break;
          }

          message.profit = reader.int32();
          continue;
        }
        case 44: {
          if (tag !== 352) {
            break;
          }

          message.providerId = reader.int32();
          continue;
        }
        case 45: {
          if (tag !== 360) {
            break;
          }

          message.requestStatus = reader.int32();
          continue;
        }
        case 46: {
          if (tag !== 370) {
            break;
          }

          message.reviewStatus = reader.string();
          continue;
        }
        case 47: {
          if (tag !== 376) {
            break;
          }

          message.riskType = reader.int32();
          continue;
        }
        case 48: {
          if (tag !== 386) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
        case 49: {
          if (tag !== 394) {
            break;
          }

          message.settlementCurrency = reader.string();
          continue;
        }
        case 50: {
          if (tag !== 402) {
            break;
          }

          message.settlementCycle = reader.string();
          continue;
        }
        case 51: {
          if (tag !== 410) {
            break;
          }

          message.transactionType = reader.string();
          continue;
        }
        case 52: {
          if (tag !== 416) {
            break;
          }

          message.upstreamEstimatedAmount = reader.int32();
          continue;
        }
        case 53: {
          if (tag !== 424) {
            break;
          }

          message.upstreamEstimatedFee = reader.int32();
          continue;
        }
        case 54: {
          if (tag !== 434) {
            break;
          }

          message.upstreamFee = reader.string();
          continue;
        }
        case 55: {
          if (tag !== 442) {
            break;
          }

          message.upstreamFixedFee = reader.string();
          continue;
        }
        case 56: {
          if (tag !== 450) {
            break;
          }

          message.upstreamGatewayFee = reader.string();
          continue;
        }
        case 57: {
          if (tag !== 458) {
            break;
          }

          message.upstreamOrderNo = reader.string();
          continue;
        }
        case 58: {
          if (tag !== 466) {
            break;
          }

          message.upstreamStatus = reader.string();
          continue;
        }
        case 59: {
          if (tag !== 474) {
            break;
          }

          message.upstreamTxRate = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderStatusOutput {
    return {
      acquiringMode: isSet(object.acquiringMode) ? globalThis.String(object.acquiringMode) : "",
      buyerId: isSet(object.buyerId) ? globalThis.String(object.buyerId) : "",
      channelId: isSet(object.channelId) ? globalThis.Number(object.channelId) : 0,
      channelRatesId: isSet(object.channelRatesId) ? globalThis.Number(object.channelRatesId) : 0,
      channelRequestTime: isSet(object.channelRequestTime) ? globalThis.Number(object.channelRequestTime) : 0,
      country: isSet(object.country) ? globalThis.String(object.country) : "",
      currency: isSet(object.currency) ? globalThis.String(object.currency) : "",
      downstreamEstimatedAmount: isSet(object.downstreamEstimatedAmount)
        ? globalThis.Number(object.downstreamEstimatedAmount)
        : 0,
      downstreamEstimatedFee: isSet(object.downstreamEstimatedFee)
        ? globalThis.Number(object.downstreamEstimatedFee)
        : 0,
      downstreamFee: isSet(object.downstreamFee) ? globalThis.String(object.downstreamFee) : "",
      downstreamFeeC: isSet(object.downstreamFeeC) ? globalThis.String(object.downstreamFeeC) : "",
      downstreamFixedFee: isSet(object.downstreamFixedFee) ? globalThis.String(object.downstreamFixedFee) : "",
      downstreamGatewayFee: isSet(object.downstreamGatewayFee) ? globalThis.String(object.downstreamGatewayFee) : "",
      downstreamOrderNo: isSet(object.downstreamOrderNo) ? globalThis.String(object.downstreamOrderNo) : "",
      downstreamOrderNoOrigin: isSet(object.downstreamOrderNoOrigin)
        ? globalThis.String(object.downstreamOrderNoOrigin)
        : "",
      downstreamRedirectUrl: isSet(object.downstreamRedirectUrl) ? globalThis.String(object.downstreamRedirectUrl) : "",
      downstreamTxRate: isSet(object.downstreamTxRate) ? globalThis.String(object.downstreamTxRate) : "",
      errorMsg: isSet(object.errorMsg) ? globalThis.String(object.errorMsg) : "",
      estimatedAmount: isSet(object.estimatedAmount) ? globalThis.Number(object.estimatedAmount) : 0,
      estimatedExchangeRate: isSet(object.estimatedExchangeRate) ? globalThis.String(object.estimatedExchangeRate) : "",
      failReason: isSet(object.failReason) ? globalThis.String(object.failReason) : "",
      freezeType: isSet(object.freezeType) ? globalThis.Number(object.freezeType) : 0,
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      merchantCurrency: isSet(object.merchantCurrency) ? globalThis.String(object.merchantCurrency) : "",
      merchantId: isSet(object.merchantId) ? globalThis.Number(object.merchantId) : 0,
      merchantName: isSet(object.merchantName) ? globalThis.String(object.merchantName) : "",
      merchantOrderAmount: isSet(object.merchantOrderAmount) ? globalThis.Number(object.merchantOrderAmount) : 0,
      merchantRequestTime: isSet(object.merchantRequestTime) ? globalThis.Number(object.merchantRequestTime) : 0,
      orderAmount: isSet(object.orderAmount) ? globalThis.Number(object.orderAmount) : 0,
      orderCreateTime: isSet(object.orderCreateTime) ? globalThis.Number(object.orderCreateTime) : 0,
      orderStatus: isSet(object.orderStatus)
        ? orderStatusFromJSON(object.orderStatus)
        : OrderStatus.ORDER_STATUS_UNSPECIFIED,
      orderType: isSet(object.orderType) ? globalThis.String(object.orderType) : "",
      origin: isSet(object.origin) ? globalThis.String(object.origin) : "",
      paymentExchange: isSet(object.paymentExchange) ? globalThis.Number(object.paymentExchange) : 0,
      paymentExchangeRate: isSet(object.paymentExchangeRate) ? globalThis.Number(object.paymentExchangeRate) : 0,
      paymentMethod: isSet(object.paymentMethod) ? globalThis.String(object.paymentMethod) : "",
      paymentTxMarkup: isSet(object.paymentTxMarkup) ? globalThis.Number(object.paymentTxMarkup) : 0,
      paymentTxMarkupUsd: isSet(object.paymentTxMarkupUsd) ? globalThis.Number(object.paymentTxMarkupUsd) : 0,
      platformId: isSet(object.platformId) ? globalThis.Number(object.platformId) : 0,
      platformOrderNo: isSet(object.platformOrderNo) ? globalThis.String(object.platformOrderNo) : "",
      productChannelId: isSet(object.productChannelId) ? globalThis.Number(object.productChannelId) : 0,
      productId: isSet(object.productId) ? globalThis.Number(object.productId) : 0,
      profit: isSet(object.profit) ? globalThis.Number(object.profit) : 0,
      providerId: isSet(object.providerId) ? globalThis.Number(object.providerId) : 0,
      requestStatus: isSet(object.requestStatus) ? globalThis.Number(object.requestStatus) : 0,
      reviewStatus: isSet(object.reviewStatus) ? globalThis.String(object.reviewStatus) : "",
      riskType: isSet(object.riskType) ? globalThis.Number(object.riskType) : 0,
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : "",
      settlementCurrency: isSet(object.settlementCurrency) ? globalThis.String(object.settlementCurrency) : "",
      settlementCycle: isSet(object.settlementCycle) ? globalThis.String(object.settlementCycle) : "",
      transactionType: isSet(object.transactionType) ? globalThis.String(object.transactionType) : "",
      upstreamEstimatedAmount: isSet(object.upstreamEstimatedAmount)
        ? globalThis.Number(object.upstreamEstimatedAmount)
        : 0,
      upstreamEstimatedFee: isSet(object.upstreamEstimatedFee) ? globalThis.Number(object.upstreamEstimatedFee) : 0,
      upstreamFee: isSet(object.upstreamFee) ? globalThis.String(object.upstreamFee) : "",
      upstreamFixedFee: isSet(object.upstreamFixedFee) ? globalThis.String(object.upstreamFixedFee) : "",
      upstreamGatewayFee: isSet(object.upstreamGatewayFee) ? globalThis.String(object.upstreamGatewayFee) : "",
      upstreamOrderNo: isSet(object.upstreamOrderNo) ? globalThis.String(object.upstreamOrderNo) : "",
      upstreamStatus: isSet(object.upstreamStatus) ? globalThis.String(object.upstreamStatus) : "",
      upstreamTxRate: isSet(object.upstreamTxRate) ? globalThis.String(object.upstreamTxRate) : "",
    };
  },

  toJSON(message: OrderStatusOutput): unknown {
    const obj: any = {};
    if (message.acquiringMode !== "") {
      obj.acquiringMode = message.acquiringMode;
    }
    if (message.buyerId !== "") {
      obj.buyerId = message.buyerId;
    }
    if (message.channelId !== 0) {
      obj.channelId = Math.round(message.channelId);
    }
    if (message.channelRatesId !== 0) {
      obj.channelRatesId = Math.round(message.channelRatesId);
    }
    if (message.channelRequestTime !== 0) {
      obj.channelRequestTime = Math.round(message.channelRequestTime);
    }
    if (message.country !== "") {
      obj.country = message.country;
    }
    if (message.currency !== "") {
      obj.currency = message.currency;
    }
    if (message.downstreamEstimatedAmount !== 0) {
      obj.downstreamEstimatedAmount = Math.round(message.downstreamEstimatedAmount);
    }
    if (message.downstreamEstimatedFee !== 0) {
      obj.downstreamEstimatedFee = Math.round(message.downstreamEstimatedFee);
    }
    if (message.downstreamFee !== "") {
      obj.downstreamFee = message.downstreamFee;
    }
    if (message.downstreamFeeC !== "") {
      obj.downstreamFeeC = message.downstreamFeeC;
    }
    if (message.downstreamFixedFee !== "") {
      obj.downstreamFixedFee = message.downstreamFixedFee;
    }
    if (message.downstreamGatewayFee !== "") {
      obj.downstreamGatewayFee = message.downstreamGatewayFee;
    }
    if (message.downstreamOrderNo !== "") {
      obj.downstreamOrderNo = message.downstreamOrderNo;
    }
    if (message.downstreamOrderNoOrigin !== "") {
      obj.downstreamOrderNoOrigin = message.downstreamOrderNoOrigin;
    }
    if (message.downstreamRedirectUrl !== "") {
      obj.downstreamRedirectUrl = message.downstreamRedirectUrl;
    }
    if (message.downstreamTxRate !== "") {
      obj.downstreamTxRate = message.downstreamTxRate;
    }
    if (message.errorMsg !== "") {
      obj.errorMsg = message.errorMsg;
    }
    if (message.estimatedAmount !== 0) {
      obj.estimatedAmount = Math.round(message.estimatedAmount);
    }
    if (message.estimatedExchangeRate !== "") {
      obj.estimatedExchangeRate = message.estimatedExchangeRate;
    }
    if (message.failReason !== "") {
      obj.failReason = message.failReason;
    }
    if (message.freezeType !== 0) {
      obj.freezeType = Math.round(message.freezeType);
    }
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.merchantCurrency !== "") {
      obj.merchantCurrency = message.merchantCurrency;
    }
    if (message.merchantId !== 0) {
      obj.merchantId = Math.round(message.merchantId);
    }
    if (message.merchantName !== "") {
      obj.merchantName = message.merchantName;
    }
    if (message.merchantOrderAmount !== 0) {
      obj.merchantOrderAmount = Math.round(message.merchantOrderAmount);
    }
    if (message.merchantRequestTime !== 0) {
      obj.merchantRequestTime = Math.round(message.merchantRequestTime);
    }
    if (message.orderAmount !== 0) {
      obj.orderAmount = Math.round(message.orderAmount);
    }
    if (message.orderCreateTime !== 0) {
      obj.orderCreateTime = Math.round(message.orderCreateTime);
    }
    if (message.orderStatus !== OrderStatus.ORDER_STATUS_UNSPECIFIED) {
      obj.orderStatus = orderStatusToJSON(message.orderStatus);
    }
    if (message.orderType !== "") {
      obj.orderType = message.orderType;
    }
    if (message.origin !== "") {
      obj.origin = message.origin;
    }
    if (message.paymentExchange !== 0) {
      obj.paymentExchange = Math.round(message.paymentExchange);
    }
    if (message.paymentExchangeRate !== 0) {
      obj.paymentExchangeRate = Math.round(message.paymentExchangeRate);
    }
    if (message.paymentMethod !== "") {
      obj.paymentMethod = message.paymentMethod;
    }
    if (message.paymentTxMarkup !== 0) {
      obj.paymentTxMarkup = Math.round(message.paymentTxMarkup);
    }
    if (message.paymentTxMarkupUsd !== 0) {
      obj.paymentTxMarkupUsd = Math.round(message.paymentTxMarkupUsd);
    }
    if (message.platformId !== 0) {
      obj.platformId = Math.round(message.platformId);
    }
    if (message.platformOrderNo !== "") {
      obj.platformOrderNo = message.platformOrderNo;
    }
    if (message.productChannelId !== 0) {
      obj.productChannelId = Math.round(message.productChannelId);
    }
    if (message.productId !== 0) {
      obj.productId = Math.round(message.productId);
    }
    if (message.profit !== 0) {
      obj.profit = Math.round(message.profit);
    }
    if (message.providerId !== 0) {
      obj.providerId = Math.round(message.providerId);
    }
    if (message.requestStatus !== 0) {
      obj.requestStatus = Math.round(message.requestStatus);
    }
    if (message.reviewStatus !== "") {
      obj.reviewStatus = message.reviewStatus;
    }
    if (message.riskType !== 0) {
      obj.riskType = Math.round(message.riskType);
    }
    if (message.sessionId !== "") {
      obj.sessionId = message.sessionId;
    }
    if (message.settlementCurrency !== "") {
      obj.settlementCurrency = message.settlementCurrency;
    }
    if (message.settlementCycle !== "") {
      obj.settlementCycle = message.settlementCycle;
    }
    if (message.transactionType !== "") {
      obj.transactionType = message.transactionType;
    }
    if (message.upstreamEstimatedAmount !== 0) {
      obj.upstreamEstimatedAmount = Math.round(message.upstreamEstimatedAmount);
    }
    if (message.upstreamEstimatedFee !== 0) {
      obj.upstreamEstimatedFee = Math.round(message.upstreamEstimatedFee);
    }
    if (message.upstreamFee !== "") {
      obj.upstreamFee = message.upstreamFee;
    }
    if (message.upstreamFixedFee !== "") {
      obj.upstreamFixedFee = message.upstreamFixedFee;
    }
    if (message.upstreamGatewayFee !== "") {
      obj.upstreamGatewayFee = message.upstreamGatewayFee;
    }
    if (message.upstreamOrderNo !== "") {
      obj.upstreamOrderNo = message.upstreamOrderNo;
    }
    if (message.upstreamStatus !== "") {
      obj.upstreamStatus = message.upstreamStatus;
    }
    if (message.upstreamTxRate !== "") {
      obj.upstreamTxRate = message.upstreamTxRate;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderStatusOutput>, I>>(base?: I): OrderStatusOutput {
    return OrderStatusOutput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderStatusOutput>, I>>(object: I): OrderStatusOutput {
    const message = createBaseOrderStatusOutput();
    message.acquiringMode = object.acquiringMode ?? "";
    message.buyerId = object.buyerId ?? "";
    message.channelId = object.channelId ?? 0;
    message.channelRatesId = object.channelRatesId ?? 0;
    message.channelRequestTime = object.channelRequestTime ?? 0;
    message.country = object.country ?? "";
    message.currency = object.currency ?? "";
    message.downstreamEstimatedAmount = object.downstreamEstimatedAmount ?? 0;
    message.downstreamEstimatedFee = object.downstreamEstimatedFee ?? 0;
    message.downstreamFee = object.downstreamFee ?? "";
    message.downstreamFeeC = object.downstreamFeeC ?? "";
    message.downstreamFixedFee = object.downstreamFixedFee ?? "";
    message.downstreamGatewayFee = object.downstreamGatewayFee ?? "";
    message.downstreamOrderNo = object.downstreamOrderNo ?? "";
    message.downstreamOrderNoOrigin = object.downstreamOrderNoOrigin ?? "";
    message.downstreamRedirectUrl = object.downstreamRedirectUrl ?? "";
    message.downstreamTxRate = object.downstreamTxRate ?? "";
    message.errorMsg = object.errorMsg ?? "";
    message.estimatedAmount = object.estimatedAmount ?? 0;
    message.estimatedExchangeRate = object.estimatedExchangeRate ?? "";
    message.failReason = object.failReason ?? "";
    message.freezeType = object.freezeType ?? 0;
    message.id = object.id ?? 0;
    message.merchantCurrency = object.merchantCurrency ?? "";
    message.merchantId = object.merchantId ?? 0;
    message.merchantName = object.merchantName ?? "";
    message.merchantOrderAmount = object.merchantOrderAmount ?? 0;
    message.merchantRequestTime = object.merchantRequestTime ?? 0;
    message.orderAmount = object.orderAmount ?? 0;
    message.orderCreateTime = object.orderCreateTime ?? 0;
    message.orderStatus = object.orderStatus ?? OrderStatus.ORDER_STATUS_UNSPECIFIED;
    message.orderType = object.orderType ?? "";
    message.origin = object.origin ?? "";
    message.paymentExchange = object.paymentExchange ?? 0;
    message.paymentExchangeRate = object.paymentExchangeRate ?? 0;
    message.paymentMethod = object.paymentMethod ?? "";
    message.paymentTxMarkup = object.paymentTxMarkup ?? 0;
    message.paymentTxMarkupUsd = object.paymentTxMarkupUsd ?? 0;
    message.platformId = object.platformId ?? 0;
    message.platformOrderNo = object.platformOrderNo ?? "";
    message.productChannelId = object.productChannelId ?? 0;
    message.productId = object.productId ?? 0;
    message.profit = object.profit ?? 0;
    message.providerId = object.providerId ?? 0;
    message.requestStatus = object.requestStatus ?? 0;
    message.reviewStatus = object.reviewStatus ?? "";
    message.riskType = object.riskType ?? 0;
    message.sessionId = object.sessionId ?? "";
    message.settlementCurrency = object.settlementCurrency ?? "";
    message.settlementCycle = object.settlementCycle ?? "";
    message.transactionType = object.transactionType ?? "";
    message.upstreamEstimatedAmount = object.upstreamEstimatedAmount ?? 0;
    message.upstreamEstimatedFee = object.upstreamEstimatedFee ?? 0;
    message.upstreamFee = object.upstreamFee ?? "";
    message.upstreamFixedFee = object.upstreamFixedFee ?? "";
    message.upstreamGatewayFee = object.upstreamGatewayFee ?? "";
    message.upstreamOrderNo = object.upstreamOrderNo ?? "";
    message.upstreamStatus = object.upstreamStatus ?? "";
    message.upstreamTxRate = object.upstreamTxRate ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
