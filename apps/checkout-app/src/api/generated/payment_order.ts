// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.27.3
// source: payment_order.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Amount } from "./all_in_one";
import { Timestamp } from "./google/protobuf/timestamp";
import { PaymentMethodForm } from "./payment_method";

export const protobufPackage = "payment";

/** PaymentOrder 消息定义 */
export interface PaymentOrder {
  /** UUID 格式 */
  id: string;
  /** 两位国家代码 */
  countryCode: string;
  /** ISO-4217 货币代码 */
  amountCurrency: string;
  /** 金额值 */
  amountValue: number;
  /** 产品ID */
  productId: string;
  /** 商户ID */
  merchantId: string;
  /** 来源URL */
  origin: string;
  /** 产品名称 */
  productName: string;
  /** 产品详情 */
  productDetail: string;
  /** PSP引用 */
  pspReference?:
    | string
    | undefined;
  /** 引用编号 */
  reference: string;
  /** 返回URL */
  returnUrl: string;
  /** 是否为兑换 */
  isExchange?:
    | boolean
    | undefined;
  /** 商户账户 */
  merchantAccount?:
    | string
    | undefined;
  /** Webhook URL */
  webhookUrl?:
    | string
    | undefined;
  /** 创建时间 */
  createdAt:
    | Date
    | undefined;
  /** 过期时间 */
  expiredAt:
    | Date
    | undefined;
  /** 支付方法ID */
  paymentMethodId?:
    | string
    | undefined;
  /** 支付方法 */
  paymentMethod?:
    | PaymentMethodForm
    | undefined;
  /** 版本号 */
  version: number;
}

/** PaymentOrderDebug 消息定义 */
export interface PaymentOrderDebug {
  /** 支付金额（整数，实际金额乘以 100） */
  amount: number;
  /** 货币代码（3个大写字母） */
  currency: string;
  /** 持卡人姓名 */
  holderName?:
    | string
    | undefined;
  /** 购物者邮箱 */
  shopperEmail?:
    | string
    | undefined;
  /** 支付方式 */
  paymentType?:
    | string
    | undefined;
  /** 商户ID */
  merchantId?: string | undefined;
}

/** TokenInput 消息定义 */
export interface TokenInput {
  /** UUID 格式的令牌 */
  token: string;
}

/** PaymentOrderOutput 消息定义 */
export interface PaymentOrderOutput {
  countryCode: string;
  origin: string;
  productId: string;
  productName: string;
  productDetail: string;
  pspReference?: string | undefined;
  reference: string;
  returnUrl: string;
  merchantAccount?: string | undefined;
  webhookUrl?: string | undefined;
  expiredAt: Date | undefined;
  isExchange: boolean;
  amount: Amount | undefined;
}

export interface PaymentOrderOutputRes {
  /** repeated PaymentOrderOutput data = 1; 加密前的消息 */
  data: string;
  code: string;
  msg: string;
  serverTime: string;
  success: boolean;
}

/** CheckOutUrl 消息定义 */
export interface CheckOutUrl {
  checkOutUrl: string;
}

export interface CheckOutUrlRes {
  data: CheckOutUrl | undefined;
  code: string;
  msg: string;
  serverTime: string;
  success: boolean;
}

function createBasePaymentOrder(): PaymentOrder {
  return {
    id: "",
    countryCode: "",
    amountCurrency: "",
    amountValue: 0,
    productId: "",
    merchantId: "",
    origin: "",
    productName: "",
    productDetail: "",
    pspReference: undefined,
    reference: "",
    returnUrl: "",
    isExchange: undefined,
    merchantAccount: undefined,
    webhookUrl: undefined,
    createdAt: undefined,
    expiredAt: undefined,
    paymentMethodId: undefined,
    paymentMethod: undefined,
    version: 0,
  };
}

export const PaymentOrder: MessageFns<PaymentOrder> = {
  encode(message: PaymentOrder, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.countryCode !== "") {
      writer.uint32(18).string(message.countryCode);
    }
    if (message.amountCurrency !== "") {
      writer.uint32(26).string(message.amountCurrency);
    }
    if (message.amountValue !== 0) {
      writer.uint32(33).double(message.amountValue);
    }
    if (message.productId !== "") {
      writer.uint32(42).string(message.productId);
    }
    if (message.merchantId !== "") {
      writer.uint32(50).string(message.merchantId);
    }
    if (message.origin !== "") {
      writer.uint32(58).string(message.origin);
    }
    if (message.productName !== "") {
      writer.uint32(66).string(message.productName);
    }
    if (message.productDetail !== "") {
      writer.uint32(74).string(message.productDetail);
    }
    if (message.pspReference !== undefined) {
      writer.uint32(82).string(message.pspReference);
    }
    if (message.reference !== "") {
      writer.uint32(90).string(message.reference);
    }
    if (message.returnUrl !== "") {
      writer.uint32(98).string(message.returnUrl);
    }
    if (message.isExchange !== undefined) {
      writer.uint32(104).bool(message.isExchange);
    }
    if (message.merchantAccount !== undefined) {
      writer.uint32(114).string(message.merchantAccount);
    }
    if (message.webhookUrl !== undefined) {
      writer.uint32(122).string(message.webhookUrl);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(130).fork()).join();
    }
    if (message.expiredAt !== undefined) {
      Timestamp.encode(toTimestamp(message.expiredAt), writer.uint32(138).fork()).join();
    }
    if (message.paymentMethodId !== undefined) {
      writer.uint32(146).string(message.paymentMethodId);
    }
    if (message.paymentMethod !== undefined) {
      PaymentMethodForm.encode(message.paymentMethod, writer.uint32(154).fork()).join();
    }
    if (message.version !== 0) {
      writer.uint32(160).int32(message.version);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaymentOrder {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaymentOrder();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.countryCode = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.amountCurrency = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.amountValue = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.merchantId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.origin = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.productName = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.productDetail = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.pspReference = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.reference = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.returnUrl = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.isExchange = reader.bool();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.merchantAccount = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.webhookUrl = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.expiredAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.paymentMethodId = reader.string();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.paymentMethod = PaymentMethodForm.decode(reader, reader.uint32());
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.version = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaymentOrder {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      countryCode: isSet(object.countryCode) ? globalThis.String(object.countryCode) : "",
      amountCurrency: isSet(object.amountCurrency) ? globalThis.String(object.amountCurrency) : "",
      amountValue: isSet(object.amountValue) ? globalThis.Number(object.amountValue) : 0,
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      merchantId: isSet(object.merchantId) ? globalThis.String(object.merchantId) : "",
      origin: isSet(object.origin) ? globalThis.String(object.origin) : "",
      productName: isSet(object.productName) ? globalThis.String(object.productName) : "",
      productDetail: isSet(object.productDetail) ? globalThis.String(object.productDetail) : "",
      pspReference: isSet(object.pspReference) ? globalThis.String(object.pspReference) : undefined,
      reference: isSet(object.reference) ? globalThis.String(object.reference) : "",
      returnUrl: isSet(object.returnUrl) ? globalThis.String(object.returnUrl) : "",
      isExchange: isSet(object.isExchange) ? globalThis.Boolean(object.isExchange) : undefined,
      merchantAccount: isSet(object.merchantAccount) ? globalThis.String(object.merchantAccount) : undefined,
      webhookUrl: isSet(object.webhookUrl) ? globalThis.String(object.webhookUrl) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      expiredAt: isSet(object.expiredAt) ? fromJsonTimestamp(object.expiredAt) : undefined,
      paymentMethodId: isSet(object.paymentMethodId) ? globalThis.String(object.paymentMethodId) : undefined,
      paymentMethod: isSet(object.paymentMethod) ? PaymentMethodForm.fromJSON(object.paymentMethod) : undefined,
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
    };
  },

  toJSON(message: PaymentOrder): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.countryCode !== "") {
      obj.countryCode = message.countryCode;
    }
    if (message.amountCurrency !== "") {
      obj.amountCurrency = message.amountCurrency;
    }
    if (message.amountValue !== 0) {
      obj.amountValue = message.amountValue;
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.merchantId !== "") {
      obj.merchantId = message.merchantId;
    }
    if (message.origin !== "") {
      obj.origin = message.origin;
    }
    if (message.productName !== "") {
      obj.productName = message.productName;
    }
    if (message.productDetail !== "") {
      obj.productDetail = message.productDetail;
    }
    if (message.pspReference !== undefined) {
      obj.pspReference = message.pspReference;
    }
    if (message.reference !== "") {
      obj.reference = message.reference;
    }
    if (message.returnUrl !== "") {
      obj.returnUrl = message.returnUrl;
    }
    if (message.isExchange !== undefined) {
      obj.isExchange = message.isExchange;
    }
    if (message.merchantAccount !== undefined) {
      obj.merchantAccount = message.merchantAccount;
    }
    if (message.webhookUrl !== undefined) {
      obj.webhookUrl = message.webhookUrl;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.expiredAt !== undefined) {
      obj.expiredAt = message.expiredAt.toISOString();
    }
    if (message.paymentMethodId !== undefined) {
      obj.paymentMethodId = message.paymentMethodId;
    }
    if (message.paymentMethod !== undefined) {
      obj.paymentMethod = PaymentMethodForm.toJSON(message.paymentMethod);
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PaymentOrder>, I>>(base?: I): PaymentOrder {
    return PaymentOrder.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PaymentOrder>, I>>(object: I): PaymentOrder {
    const message = createBasePaymentOrder();
    message.id = object.id ?? "";
    message.countryCode = object.countryCode ?? "";
    message.amountCurrency = object.amountCurrency ?? "";
    message.amountValue = object.amountValue ?? 0;
    message.productId = object.productId ?? "";
    message.merchantId = object.merchantId ?? "";
    message.origin = object.origin ?? "";
    message.productName = object.productName ?? "";
    message.productDetail = object.productDetail ?? "";
    message.pspReference = object.pspReference ?? undefined;
    message.reference = object.reference ?? "";
    message.returnUrl = object.returnUrl ?? "";
    message.isExchange = object.isExchange ?? undefined;
    message.merchantAccount = object.merchantAccount ?? undefined;
    message.webhookUrl = object.webhookUrl ?? undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.expiredAt = object.expiredAt ?? undefined;
    message.paymentMethodId = object.paymentMethodId ?? undefined;
    message.paymentMethod = (object.paymentMethod !== undefined && object.paymentMethod !== null)
      ? PaymentMethodForm.fromPartial(object.paymentMethod)
      : undefined;
    message.version = object.version ?? 0;
    return message;
  },
};

function createBasePaymentOrderDebug(): PaymentOrderDebug {
  return {
    amount: 0,
    currency: "",
    holderName: undefined,
    shopperEmail: undefined,
    paymentType: undefined,
    merchantId: undefined,
  };
}

export const PaymentOrderDebug: MessageFns<PaymentOrderDebug> = {
  encode(message: PaymentOrderDebug, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.amount !== 0) {
      writer.uint32(8).int32(message.amount);
    }
    if (message.currency !== "") {
      writer.uint32(18).string(message.currency);
    }
    if (message.holderName !== undefined) {
      writer.uint32(26).string(message.holderName);
    }
    if (message.shopperEmail !== undefined) {
      writer.uint32(34).string(message.shopperEmail);
    }
    if (message.paymentType !== undefined) {
      writer.uint32(42).string(message.paymentType);
    }
    if (message.merchantId !== undefined) {
      writer.uint32(50).string(message.merchantId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaymentOrderDebug {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaymentOrderDebug();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.amount = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.holderName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.shopperEmail = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.paymentType = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.merchantId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaymentOrderDebug {
    return {
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      currency: isSet(object.currency) ? globalThis.String(object.currency) : "",
      holderName: isSet(object.holderName) ? globalThis.String(object.holderName) : undefined,
      shopperEmail: isSet(object.shopperEmail) ? globalThis.String(object.shopperEmail) : undefined,
      paymentType: isSet(object.paymentType) ? globalThis.String(object.paymentType) : undefined,
      merchantId: isSet(object.merchantId) ? globalThis.String(object.merchantId) : undefined,
    };
  },

  toJSON(message: PaymentOrderDebug): unknown {
    const obj: any = {};
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.currency !== "") {
      obj.currency = message.currency;
    }
    if (message.holderName !== undefined) {
      obj.holderName = message.holderName;
    }
    if (message.shopperEmail !== undefined) {
      obj.shopperEmail = message.shopperEmail;
    }
    if (message.paymentType !== undefined) {
      obj.paymentType = message.paymentType;
    }
    if (message.merchantId !== undefined) {
      obj.merchantId = message.merchantId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PaymentOrderDebug>, I>>(base?: I): PaymentOrderDebug {
    return PaymentOrderDebug.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PaymentOrderDebug>, I>>(object: I): PaymentOrderDebug {
    const message = createBasePaymentOrderDebug();
    message.amount = object.amount ?? 0;
    message.currency = object.currency ?? "";
    message.holderName = object.holderName ?? undefined;
    message.shopperEmail = object.shopperEmail ?? undefined;
    message.paymentType = object.paymentType ?? undefined;
    message.merchantId = object.merchantId ?? undefined;
    return message;
  },
};

function createBaseTokenInput(): TokenInput {
  return { token: "" };
}

export const TokenInput: MessageFns<TokenInput> = {
  encode(message: TokenInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TokenInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTokenInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TokenInput {
    return { token: isSet(object.token) ? globalThis.String(object.token) : "" };
  },

  toJSON(message: TokenInput): unknown {
    const obj: any = {};
    if (message.token !== "") {
      obj.token = message.token;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TokenInput>, I>>(base?: I): TokenInput {
    return TokenInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TokenInput>, I>>(object: I): TokenInput {
    const message = createBaseTokenInput();
    message.token = object.token ?? "";
    return message;
  },
};

function createBasePaymentOrderOutput(): PaymentOrderOutput {
  return {
    countryCode: "",
    origin: "",
    productId: "",
    productName: "",
    productDetail: "",
    pspReference: undefined,
    reference: "",
    returnUrl: "",
    merchantAccount: undefined,
    webhookUrl: undefined,
    expiredAt: undefined,
    isExchange: false,
    amount: undefined,
  };
}

export const PaymentOrderOutput: MessageFns<PaymentOrderOutput> = {
  encode(message: PaymentOrderOutput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.countryCode !== "") {
      writer.uint32(10).string(message.countryCode);
    }
    if (message.origin !== "") {
      writer.uint32(18).string(message.origin);
    }
    if (message.productId !== "") {
      writer.uint32(26).string(message.productId);
    }
    if (message.productName !== "") {
      writer.uint32(34).string(message.productName);
    }
    if (message.productDetail !== "") {
      writer.uint32(42).string(message.productDetail);
    }
    if (message.pspReference !== undefined) {
      writer.uint32(50).string(message.pspReference);
    }
    if (message.reference !== "") {
      writer.uint32(58).string(message.reference);
    }
    if (message.returnUrl !== "") {
      writer.uint32(66).string(message.returnUrl);
    }
    if (message.merchantAccount !== undefined) {
      writer.uint32(74).string(message.merchantAccount);
    }
    if (message.webhookUrl !== undefined) {
      writer.uint32(82).string(message.webhookUrl);
    }
    if (message.expiredAt !== undefined) {
      Timestamp.encode(toTimestamp(message.expiredAt), writer.uint32(90).fork()).join();
    }
    if (message.isExchange !== false) {
      writer.uint32(96).bool(message.isExchange);
    }
    if (message.amount !== undefined) {
      Amount.encode(message.amount, writer.uint32(106).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaymentOrderOutput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaymentOrderOutput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.countryCode = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.origin = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.productName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.productDetail = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.pspReference = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.reference = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.returnUrl = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.merchantAccount = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.webhookUrl = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.expiredAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.isExchange = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.amount = Amount.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaymentOrderOutput {
    return {
      countryCode: isSet(object.countryCode) ? globalThis.String(object.countryCode) : "",
      origin: isSet(object.origin) ? globalThis.String(object.origin) : "",
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      productName: isSet(object.productName) ? globalThis.String(object.productName) : "",
      productDetail: isSet(object.productDetail) ? globalThis.String(object.productDetail) : "",
      pspReference: isSet(object.pspReference) ? globalThis.String(object.pspReference) : undefined,
      reference: isSet(object.reference) ? globalThis.String(object.reference) : "",
      returnUrl: isSet(object.returnUrl) ? globalThis.String(object.returnUrl) : "",
      merchantAccount: isSet(object.merchantAccount) ? globalThis.String(object.merchantAccount) : undefined,
      webhookUrl: isSet(object.webhookUrl) ? globalThis.String(object.webhookUrl) : undefined,
      expiredAt: isSet(object.expiredAt) ? fromJsonTimestamp(object.expiredAt) : undefined,
      isExchange: isSet(object.isExchange) ? globalThis.Boolean(object.isExchange) : false,
      amount: isSet(object.amount) ? Amount.fromJSON(object.amount) : undefined,
    };
  },

  toJSON(message: PaymentOrderOutput): unknown {
    const obj: any = {};
    if (message.countryCode !== "") {
      obj.countryCode = message.countryCode;
    }
    if (message.origin !== "") {
      obj.origin = message.origin;
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.productName !== "") {
      obj.productName = message.productName;
    }
    if (message.productDetail !== "") {
      obj.productDetail = message.productDetail;
    }
    if (message.pspReference !== undefined) {
      obj.pspReference = message.pspReference;
    }
    if (message.reference !== "") {
      obj.reference = message.reference;
    }
    if (message.returnUrl !== "") {
      obj.returnUrl = message.returnUrl;
    }
    if (message.merchantAccount !== undefined) {
      obj.merchantAccount = message.merchantAccount;
    }
    if (message.webhookUrl !== undefined) {
      obj.webhookUrl = message.webhookUrl;
    }
    if (message.expiredAt !== undefined) {
      obj.expiredAt = message.expiredAt.toISOString();
    }
    if (message.isExchange !== false) {
      obj.isExchange = message.isExchange;
    }
    if (message.amount !== undefined) {
      obj.amount = Amount.toJSON(message.amount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PaymentOrderOutput>, I>>(base?: I): PaymentOrderOutput {
    return PaymentOrderOutput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PaymentOrderOutput>, I>>(object: I): PaymentOrderOutput {
    const message = createBasePaymentOrderOutput();
    message.countryCode = object.countryCode ?? "";
    message.origin = object.origin ?? "";
    message.productId = object.productId ?? "";
    message.productName = object.productName ?? "";
    message.productDetail = object.productDetail ?? "";
    message.pspReference = object.pspReference ?? undefined;
    message.reference = object.reference ?? "";
    message.returnUrl = object.returnUrl ?? "";
    message.merchantAccount = object.merchantAccount ?? undefined;
    message.webhookUrl = object.webhookUrl ?? undefined;
    message.expiredAt = object.expiredAt ?? undefined;
    message.isExchange = object.isExchange ?? false;
    message.amount = (object.amount !== undefined && object.amount !== null)
      ? Amount.fromPartial(object.amount)
      : undefined;
    return message;
  },
};

function createBasePaymentOrderOutputRes(): PaymentOrderOutputRes {
  return { data: "", code: "", msg: "", serverTime: "0", success: false };
}

export const PaymentOrderOutputRes: MessageFns<PaymentOrderOutputRes> = {
  encode(message: PaymentOrderOutputRes, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== "") {
      writer.uint32(10).string(message.data);
    }
    if (message.code !== "") {
      writer.uint32(18).string(message.code);
    }
    if (message.msg !== "") {
      writer.uint32(26).string(message.msg);
    }
    if (message.serverTime !== "0") {
      writer.uint32(32).uint64(message.serverTime);
    }
    if (message.success !== false) {
      writer.uint32(40).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaymentOrderOutputRes {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaymentOrderOutputRes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.msg = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.serverTime = reader.uint64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaymentOrderOutputRes {
    return {
      data: isSet(object.data) ? globalThis.String(object.data) : "",
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      msg: isSet(object.msg) ? globalThis.String(object.msg) : "",
      serverTime: isSet(object.serverTime) ? globalThis.String(object.serverTime) : "0",
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
    };
  },

  toJSON(message: PaymentOrderOutputRes): unknown {
    const obj: any = {};
    if (message.data !== "") {
      obj.data = message.data;
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.msg !== "") {
      obj.msg = message.msg;
    }
    if (message.serverTime !== "0") {
      obj.serverTime = message.serverTime;
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PaymentOrderOutputRes>, I>>(base?: I): PaymentOrderOutputRes {
    return PaymentOrderOutputRes.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PaymentOrderOutputRes>, I>>(object: I): PaymentOrderOutputRes {
    const message = createBasePaymentOrderOutputRes();
    message.data = object.data ?? "";
    message.code = object.code ?? "";
    message.msg = object.msg ?? "";
    message.serverTime = object.serverTime ?? "0";
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseCheckOutUrl(): CheckOutUrl {
  return { checkOutUrl: "" };
}

export const CheckOutUrl: MessageFns<CheckOutUrl> = {
  encode(message: CheckOutUrl, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.checkOutUrl !== "") {
      writer.uint32(10).string(message.checkOutUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckOutUrl {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckOutUrl();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.checkOutUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckOutUrl {
    return { checkOutUrl: isSet(object.checkOutUrl) ? globalThis.String(object.checkOutUrl) : "" };
  },

  toJSON(message: CheckOutUrl): unknown {
    const obj: any = {};
    if (message.checkOutUrl !== "") {
      obj.checkOutUrl = message.checkOutUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckOutUrl>, I>>(base?: I): CheckOutUrl {
    return CheckOutUrl.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckOutUrl>, I>>(object: I): CheckOutUrl {
    const message = createBaseCheckOutUrl();
    message.checkOutUrl = object.checkOutUrl ?? "";
    return message;
  },
};

function createBaseCheckOutUrlRes(): CheckOutUrlRes {
  return { data: undefined, code: "", msg: "", serverTime: "0", success: false };
}

export const CheckOutUrlRes: MessageFns<CheckOutUrlRes> = {
  encode(message: CheckOutUrlRes, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      CheckOutUrl.encode(message.data, writer.uint32(10).fork()).join();
    }
    if (message.code !== "") {
      writer.uint32(18).string(message.code);
    }
    if (message.msg !== "") {
      writer.uint32(26).string(message.msg);
    }
    if (message.serverTime !== "0") {
      writer.uint32(32).uint64(message.serverTime);
    }
    if (message.success !== false) {
      writer.uint32(40).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckOutUrlRes {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckOutUrlRes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = CheckOutUrl.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.msg = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.serverTime = reader.uint64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckOutUrlRes {
    return {
      data: isSet(object.data) ? CheckOutUrl.fromJSON(object.data) : undefined,
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      msg: isSet(object.msg) ? globalThis.String(object.msg) : "",
      serverTime: isSet(object.serverTime) ? globalThis.String(object.serverTime) : "0",
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
    };
  },

  toJSON(message: CheckOutUrlRes): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = CheckOutUrl.toJSON(message.data);
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.msg !== "") {
      obj.msg = message.msg;
    }
    if (message.serverTime !== "0") {
      obj.serverTime = message.serverTime;
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckOutUrlRes>, I>>(base?: I): CheckOutUrlRes {
    return CheckOutUrlRes.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckOutUrlRes>, I>>(object: I): CheckOutUrlRes {
    const message = createBaseCheckOutUrlRes();
    message.data = (object.data !== undefined && object.data !== null)
      ? CheckOutUrl.fromPartial(object.data)
      : undefined;
    message.code = object.code ?? "";
    message.msg = object.msg ?? "";
    message.serverTime = object.serverTime ?? "0";
    message.success = object.success ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
