// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.27.3
// source: all_in_one_input.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Amount } from "./all_in_one";

export const protobufPackage = "payment";

/** 浏览器终端信息 */
export interface BrowserInfo {
  /** 终端类型，例如 WEB, MOBILE */
  terminalType?: string | undefined;
}

/** 支付请求数据结构 */
export interface PaymentInput {
  /** 订单金额信息 */
  amount:
    | Amount
    | undefined;
  /** 国家代码，符合 ISO 3166-1 Alpha-2 标准 */
  countryCode: string;
  /** 是否进行汇率转换 */
  isExchange: boolean;
  /** 商户账户名称 */
  merchantAccount: string;
  /** 商户 ID */
  merchantId: string;
  /** 请求来源，例如 xyz.com */
  origin: string;
  /** 产品详细描述信息 */
  productDetail: string;
  /** 产品 ID */
  productId: string;
  /** 产品名称 */
  productName: string;
  /** 订单唯一参考号 */
  reference: string;
  /** 支付完成后的回调 URL */
  returnUrl: string;
  /** 支付通知 Webhook URL */
  webhookUrl: string;
  /** 浏览器终端信息 */
  browserInfo?:
    | BrowserInfo
    | undefined;
  /** 支付处理货币，符合 ISO 4217 货币代码 */
  processingCurrency: string;
}

/** 支付请求头 */
export interface PaymentHeader {
  /** 支付渠道 ID */
  providerId: string;
  /** 商户 ID */
  merchantId: string;
  /** 应用 ID */
  appId: string;
}

function createBaseBrowserInfo(): BrowserInfo {
  return { terminalType: undefined };
}

export const BrowserInfo: MessageFns<BrowserInfo> = {
  encode(message: BrowserInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.terminalType !== undefined) {
      writer.uint32(10).string(message.terminalType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BrowserInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBrowserInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.terminalType = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BrowserInfo {
    return { terminalType: isSet(object.terminalType) ? globalThis.String(object.terminalType) : undefined };
  },

  toJSON(message: BrowserInfo): unknown {
    const obj: any = {};
    if (message.terminalType !== undefined) {
      obj.terminalType = message.terminalType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BrowserInfo>, I>>(base?: I): BrowserInfo {
    return BrowserInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BrowserInfo>, I>>(object: I): BrowserInfo {
    const message = createBaseBrowserInfo();
    message.terminalType = object.terminalType ?? undefined;
    return message;
  },
};

function createBasePaymentInput(): PaymentInput {
  return {
    amount: undefined,
    countryCode: "",
    isExchange: false,
    merchantAccount: "",
    merchantId: "",
    origin: "",
    productDetail: "",
    productId: "",
    productName: "",
    reference: "",
    returnUrl: "",
    webhookUrl: "",
    browserInfo: undefined,
    processingCurrency: "",
  };
}

export const PaymentInput: MessageFns<PaymentInput> = {
  encode(message: PaymentInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.amount !== undefined) {
      Amount.encode(message.amount, writer.uint32(10).fork()).join();
    }
    if (message.countryCode !== "") {
      writer.uint32(18).string(message.countryCode);
    }
    if (message.isExchange !== false) {
      writer.uint32(24).bool(message.isExchange);
    }
    if (message.merchantAccount !== "") {
      writer.uint32(34).string(message.merchantAccount);
    }
    if (message.merchantId !== "") {
      writer.uint32(42).string(message.merchantId);
    }
    if (message.origin !== "") {
      writer.uint32(50).string(message.origin);
    }
    if (message.productDetail !== "") {
      writer.uint32(58).string(message.productDetail);
    }
    if (message.productId !== "") {
      writer.uint32(66).string(message.productId);
    }
    if (message.productName !== "") {
      writer.uint32(74).string(message.productName);
    }
    if (message.reference !== "") {
      writer.uint32(82).string(message.reference);
    }
    if (message.returnUrl !== "") {
      writer.uint32(90).string(message.returnUrl);
    }
    if (message.webhookUrl !== "") {
      writer.uint32(98).string(message.webhookUrl);
    }
    if (message.browserInfo !== undefined) {
      BrowserInfo.encode(message.browserInfo, writer.uint32(106).fork()).join();
    }
    if (message.processingCurrency !== "") {
      writer.uint32(114).string(message.processingCurrency);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaymentInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaymentInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.amount = Amount.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.countryCode = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.isExchange = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.merchantAccount = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.merchantId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.origin = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.productDetail = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.productName = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.reference = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.returnUrl = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.webhookUrl = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.browserInfo = BrowserInfo.decode(reader, reader.uint32());
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.processingCurrency = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaymentInput {
    return {
      amount: isSet(object.amount) ? Amount.fromJSON(object.amount) : undefined,
      countryCode: isSet(object.countryCode) ? globalThis.String(object.countryCode) : "",
      isExchange: isSet(object.isExchange) ? globalThis.Boolean(object.isExchange) : false,
      merchantAccount: isSet(object.merchantAccount) ? globalThis.String(object.merchantAccount) : "",
      merchantId: isSet(object.merchantId) ? globalThis.String(object.merchantId) : "",
      origin: isSet(object.origin) ? globalThis.String(object.origin) : "",
      productDetail: isSet(object.productDetail) ? globalThis.String(object.productDetail) : "",
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      productName: isSet(object.productName) ? globalThis.String(object.productName) : "",
      reference: isSet(object.reference) ? globalThis.String(object.reference) : "",
      returnUrl: isSet(object.returnUrl) ? globalThis.String(object.returnUrl) : "",
      webhookUrl: isSet(object.webhookUrl) ? globalThis.String(object.webhookUrl) : "",
      browserInfo: isSet(object.browserInfo) ? BrowserInfo.fromJSON(object.browserInfo) : undefined,
      processingCurrency: isSet(object.processingCurrency) ? globalThis.String(object.processingCurrency) : "",
    };
  },

  toJSON(message: PaymentInput): unknown {
    const obj: any = {};
    if (message.amount !== undefined) {
      obj.amount = Amount.toJSON(message.amount);
    }
    if (message.countryCode !== "") {
      obj.countryCode = message.countryCode;
    }
    if (message.isExchange !== false) {
      obj.isExchange = message.isExchange;
    }
    if (message.merchantAccount !== "") {
      obj.merchantAccount = message.merchantAccount;
    }
    if (message.merchantId !== "") {
      obj.merchantId = message.merchantId;
    }
    if (message.origin !== "") {
      obj.origin = message.origin;
    }
    if (message.productDetail !== "") {
      obj.productDetail = message.productDetail;
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.productName !== "") {
      obj.productName = message.productName;
    }
    if (message.reference !== "") {
      obj.reference = message.reference;
    }
    if (message.returnUrl !== "") {
      obj.returnUrl = message.returnUrl;
    }
    if (message.webhookUrl !== "") {
      obj.webhookUrl = message.webhookUrl;
    }
    if (message.browserInfo !== undefined) {
      obj.browserInfo = BrowserInfo.toJSON(message.browserInfo);
    }
    if (message.processingCurrency !== "") {
      obj.processingCurrency = message.processingCurrency;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PaymentInput>, I>>(base?: I): PaymentInput {
    return PaymentInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PaymentInput>, I>>(object: I): PaymentInput {
    const message = createBasePaymentInput();
    message.amount = (object.amount !== undefined && object.amount !== null)
      ? Amount.fromPartial(object.amount)
      : undefined;
    message.countryCode = object.countryCode ?? "";
    message.isExchange = object.isExchange ?? false;
    message.merchantAccount = object.merchantAccount ?? "";
    message.merchantId = object.merchantId ?? "";
    message.origin = object.origin ?? "";
    message.productDetail = object.productDetail ?? "";
    message.productId = object.productId ?? "";
    message.productName = object.productName ?? "";
    message.reference = object.reference ?? "";
    message.returnUrl = object.returnUrl ?? "";
    message.webhookUrl = object.webhookUrl ?? "";
    message.browserInfo = (object.browserInfo !== undefined && object.browserInfo !== null)
      ? BrowserInfo.fromPartial(object.browserInfo)
      : undefined;
    message.processingCurrency = object.processingCurrency ?? "";
    return message;
  },
};

function createBasePaymentHeader(): PaymentHeader {
  return { providerId: "", merchantId: "", appId: "" };
}

export const PaymentHeader: MessageFns<PaymentHeader> = {
  encode(message: PaymentHeader, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.providerId !== "") {
      writer.uint32(10).string(message.providerId);
    }
    if (message.merchantId !== "") {
      writer.uint32(18).string(message.merchantId);
    }
    if (message.appId !== "") {
      writer.uint32(26).string(message.appId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaymentHeader {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaymentHeader();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.providerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.merchantId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.appId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaymentHeader {
    return {
      providerId: isSet(object.providerId) ? globalThis.String(object.providerId) : "",
      merchantId: isSet(object.merchantId) ? globalThis.String(object.merchantId) : "",
      appId: isSet(object.appId) ? globalThis.String(object.appId) : "",
    };
  },

  toJSON(message: PaymentHeader): unknown {
    const obj: any = {};
    if (message.providerId !== "") {
      obj.providerId = message.providerId;
    }
    if (message.merchantId !== "") {
      obj.merchantId = message.merchantId;
    }
    if (message.appId !== "") {
      obj.appId = message.appId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PaymentHeader>, I>>(base?: I): PaymentHeader {
    return PaymentHeader.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PaymentHeader>, I>>(object: I): PaymentHeader {
    const message = createBasePaymentHeader();
    message.providerId = object.providerId ?? "";
    message.merchantId = object.merchantId ?? "";
    message.appId = object.appId ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
