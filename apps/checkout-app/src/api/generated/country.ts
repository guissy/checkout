// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.27.3
// source: country.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "country";

/** Country 实体定义 */
export interface Country {
  id: number;
  countryId: string;
  iso2Code: string;
  countryCode: string;
  countryNameEn: string;
  countryNameCn: string;
}

/** 扩展的 Country 信息 */
export interface CountryDetail {
  id: number;
  countryId: number;
  iso2Code: string;
  countryCode: string;
  countryNameEn: string;
  countryNameCn: string;
  iso3Code: string;
  imgUrl: string;
  label: number;
  flag: number;
  operator: number;
  createTime: string;
  updateTime: string;
}

/** Country 列表响应 */
export interface CountryList {
  data: CountryDetail[];
  code: string;
  msg: string;
  serverTime: string;
  success: boolean;
}

function createBaseCountry(): Country {
  return { id: 0, countryId: "", iso2Code: "", countryCode: "", countryNameEn: "", countryNameCn: "" };
}

export const Country: MessageFns<Country> = {
  encode(message: Country, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.countryId !== "") {
      writer.uint32(18).string(message.countryId);
    }
    if (message.iso2Code !== "") {
      writer.uint32(26).string(message.iso2Code);
    }
    if (message.countryCode !== "") {
      writer.uint32(34).string(message.countryCode);
    }
    if (message.countryNameEn !== "") {
      writer.uint32(42).string(message.countryNameEn);
    }
    if (message.countryNameCn !== "") {
      writer.uint32(50).string(message.countryNameCn);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Country {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCountry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.countryId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.iso2Code = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.countryCode = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.countryNameEn = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.countryNameCn = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Country {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      countryId: isSet(object.countryId) ? globalThis.String(object.countryId) : "",
      iso2Code: isSet(object.iso2Code) ? globalThis.String(object.iso2Code) : "",
      countryCode: isSet(object.countryCode) ? globalThis.String(object.countryCode) : "",
      countryNameEn: isSet(object.countryNameEn) ? globalThis.String(object.countryNameEn) : "",
      countryNameCn: isSet(object.countryNameCn) ? globalThis.String(object.countryNameCn) : "",
    };
  },

  toJSON(message: Country): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.countryId !== "") {
      obj.countryId = message.countryId;
    }
    if (message.iso2Code !== "") {
      obj.iso2Code = message.iso2Code;
    }
    if (message.countryCode !== "") {
      obj.countryCode = message.countryCode;
    }
    if (message.countryNameEn !== "") {
      obj.countryNameEn = message.countryNameEn;
    }
    if (message.countryNameCn !== "") {
      obj.countryNameCn = message.countryNameCn;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Country>, I>>(base?: I): Country {
    return Country.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Country>, I>>(object: I): Country {
    const message = createBaseCountry();
    message.id = object.id ?? 0;
    message.countryId = object.countryId ?? "";
    message.iso2Code = object.iso2Code ?? "";
    message.countryCode = object.countryCode ?? "";
    message.countryNameEn = object.countryNameEn ?? "";
    message.countryNameCn = object.countryNameCn ?? "";
    return message;
  },
};

function createBaseCountryDetail(): CountryDetail {
  return {
    id: 0,
    countryId: 0,
    iso2Code: "",
    countryCode: "",
    countryNameEn: "",
    countryNameCn: "",
    iso3Code: "",
    imgUrl: "",
    label: 0,
    flag: 0,
    operator: 0,
    createTime: "0",
    updateTime: "0",
  };
}

export const CountryDetail: MessageFns<CountryDetail> = {
  encode(message: CountryDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.countryId !== 0) {
      writer.uint32(16).int32(message.countryId);
    }
    if (message.iso2Code !== "") {
      writer.uint32(26).string(message.iso2Code);
    }
    if (message.countryCode !== "") {
      writer.uint32(34).string(message.countryCode);
    }
    if (message.countryNameEn !== "") {
      writer.uint32(42).string(message.countryNameEn);
    }
    if (message.countryNameCn !== "") {
      writer.uint32(50).string(message.countryNameCn);
    }
    if (message.iso3Code !== "") {
      writer.uint32(58).string(message.iso3Code);
    }
    if (message.imgUrl !== "") {
      writer.uint32(66).string(message.imgUrl);
    }
    if (message.label !== 0) {
      writer.uint32(72).int32(message.label);
    }
    if (message.flag !== 0) {
      writer.uint32(80).int32(message.flag);
    }
    if (message.operator !== 0) {
      writer.uint32(88).int32(message.operator);
    }
    if (message.createTime !== "0") {
      writer.uint32(96).int64(message.createTime);
    }
    if (message.updateTime !== "0") {
      writer.uint32(104).int64(message.updateTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CountryDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCountryDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.countryId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.iso2Code = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.countryCode = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.countryNameEn = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.countryNameCn = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.iso3Code = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.imgUrl = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.label = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.flag = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.operator = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.createTime = reader.int64().toString();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.updateTime = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CountryDetail {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      countryId: isSet(object.countryId) ? globalThis.Number(object.countryId) : 0,
      iso2Code: isSet(object.iso2Code) ? globalThis.String(object.iso2Code) : "",
      countryCode: isSet(object.countryCode) ? globalThis.String(object.countryCode) : "",
      countryNameEn: isSet(object.countryNameEn) ? globalThis.String(object.countryNameEn) : "",
      countryNameCn: isSet(object.countryNameCn) ? globalThis.String(object.countryNameCn) : "",
      iso3Code: isSet(object.iso3Code) ? globalThis.String(object.iso3Code) : "",
      imgUrl: isSet(object.imgUrl) ? globalThis.String(object.imgUrl) : "",
      label: isSet(object.label) ? globalThis.Number(object.label) : 0,
      flag: isSet(object.flag) ? globalThis.Number(object.flag) : 0,
      operator: isSet(object.operator) ? globalThis.Number(object.operator) : 0,
      createTime: isSet(object.createTime) ? globalThis.String(object.createTime) : "0",
      updateTime: isSet(object.updateTime) ? globalThis.String(object.updateTime) : "0",
    };
  },

  toJSON(message: CountryDetail): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.countryId !== 0) {
      obj.countryId = Math.round(message.countryId);
    }
    if (message.iso2Code !== "") {
      obj.iso2Code = message.iso2Code;
    }
    if (message.countryCode !== "") {
      obj.countryCode = message.countryCode;
    }
    if (message.countryNameEn !== "") {
      obj.countryNameEn = message.countryNameEn;
    }
    if (message.countryNameCn !== "") {
      obj.countryNameCn = message.countryNameCn;
    }
    if (message.iso3Code !== "") {
      obj.iso3Code = message.iso3Code;
    }
    if (message.imgUrl !== "") {
      obj.imgUrl = message.imgUrl;
    }
    if (message.label !== 0) {
      obj.label = Math.round(message.label);
    }
    if (message.flag !== 0) {
      obj.flag = Math.round(message.flag);
    }
    if (message.operator !== 0) {
      obj.operator = Math.round(message.operator);
    }
    if (message.createTime !== "0") {
      obj.createTime = message.createTime;
    }
    if (message.updateTime !== "0") {
      obj.updateTime = message.updateTime;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CountryDetail>, I>>(base?: I): CountryDetail {
    return CountryDetail.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CountryDetail>, I>>(object: I): CountryDetail {
    const message = createBaseCountryDetail();
    message.id = object.id ?? 0;
    message.countryId = object.countryId ?? 0;
    message.iso2Code = object.iso2Code ?? "";
    message.countryCode = object.countryCode ?? "";
    message.countryNameEn = object.countryNameEn ?? "";
    message.countryNameCn = object.countryNameCn ?? "";
    message.iso3Code = object.iso3Code ?? "";
    message.imgUrl = object.imgUrl ?? "";
    message.label = object.label ?? 0;
    message.flag = object.flag ?? 0;
    message.operator = object.operator ?? 0;
    message.createTime = object.createTime ?? "0";
    message.updateTime = object.updateTime ?? "0";
    return message;
  },
};

function createBaseCountryList(): CountryList {
  return { data: [], code: "", msg: "", serverTime: "0", success: false };
}

export const CountryList: MessageFns<CountryList> = {
  encode(message: CountryList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.data) {
      CountryDetail.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.code !== "") {
      writer.uint32(18).string(message.code);
    }
    if (message.msg !== "") {
      writer.uint32(26).string(message.msg);
    }
    if (message.serverTime !== "0") {
      writer.uint32(32).uint64(message.serverTime);
    }
    if (message.success !== false) {
      writer.uint32(40).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CountryList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCountryList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data.push(CountryDetail.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.msg = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.serverTime = reader.uint64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CountryList {
    return {
      data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => CountryDetail.fromJSON(e)) : [],
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      msg: isSet(object.msg) ? globalThis.String(object.msg) : "",
      serverTime: isSet(object.serverTime) ? globalThis.String(object.serverTime) : "0",
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
    };
  },

  toJSON(message: CountryList): unknown {
    const obj: any = {};
    if (message.data?.length) {
      obj.data = message.data.map((e) => CountryDetail.toJSON(e));
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.msg !== "") {
      obj.msg = message.msg;
    }
    if (message.serverTime !== "0") {
      obj.serverTime = message.serverTime;
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CountryList>, I>>(base?: I): CountryList {
    return CountryList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CountryList>, I>>(object: I): CountryList {
    const message = createBaseCountryList();
    message.data = object.data?.map((e) => CountryDetail.fromPartial(e)) || [];
    message.code = object.code ?? "";
    message.msg = object.msg ?? "";
    message.serverTime = object.serverTime ?? "0";
    message.success = object.success ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
